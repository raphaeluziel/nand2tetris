<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> boolean </keyword>
		<identifier> test </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> hell </identifier>
		<symbol> , </symbol>
		<identifier> south </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> y </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> g </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> hell </identifier>
				<symbol> , </symbol>
				<identifier> southland </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier> wallabout </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> x </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 999 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> y </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant> HELLLLLLLLLLL </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> wonderful </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> hell </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> more </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> boolean </keyword>
			<identifier> fff </identifier>
			<symbol> , </symbol>
			<keyword> char </keyword>
			<identifier> y </identifier>
			<symbol> , </symbol>
			<identifier> Main </identifier>
			<identifier> mmmm </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> test </identifier>
						</term>
						<symbol> &gt; </symbol>
						<term>
							<integerConstant> 99 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<symbol> } </symbol>
				</ifStatement>
			</statements>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> grevel </identifier>
						</term>
						<symbol> &lt; </symbol>
						<term>
							<identifier> gt </identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> hell </identifier>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> x </identifier>
								</term>
							</expression>
							<symbol> , </symbol>
							<expression>
								<term>
									<identifier> y </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> game </identifier>
							<symbol> . </symbol>
							<identifier> run </identifier>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> r </identifier>
								</term>
							</expression>
							<symbol> , </symbol>
							<expression>
								<term>
									<identifier> t </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
			</statements>
			<statements>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<integerConstant> 45 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
