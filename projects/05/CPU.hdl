// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    ALU (x=inputD,
         y=inputAM, 
         zx=instruction[11],
         nx=instruction[10],
         zy=instruction[9],
         ny=instruction[8],
         f=instruction[7],
         no=instruction[6],
         zr=zr,
         ng=ng,
         out=loop,
         out=outM);
    
    // If it's an A instruction, load the A register
    // If it's a C instruction don't 
    // (the instruction will be routed to the various control bits)
    Mux16 (a=instruction, b=loop, sel=instruction[15], out=regA);

    // Load the A register if it is an A instruction or if it is a
    // C instruction with a destination of A
    And (a=instruction[5], b=instruction[15], out=cInstWithDesta);
    Not (in=instruction[15], out=aInstruction);
    Or (a=cInstWithDesta, b=aInstruction, out=loadRegA);
    ARegister (in=regA, load=loadRegA, out=outA, out[0..14]=addressM);

    // Load the D register with ALU output it is a C instruction
    // and the destination is the D register
    And (a=instruction[15], b=instruction[4], out=loadRegD);
    DRegister (in=loop, load=loadRegD, out=inputD);

    // If it is a C instruction, choose either the A register or the
    // memory (M) as the input to the ALU
    And (a=instruction[15], b=instruction[12], out=aMuxM);
    Mux16 (a=outA, b=inM, sel=aMuxM, out=inputAM);

    // Is the output positive?
    Not (in=zr, out=notZero);
    Not (in=ng, out=notNegative);
    And (a=notZero, b=notNegative, out=ps);

    // Jump if the output is ___ and the jump instruction is the same
    // (example: jump if the output is positive, and the j3 bit is 1)
    And (a=ps, b=instruction[0], out=jgt);
    And (a=zr, b=instruction[1], out=jeq);
    And (a=ng, b=instruction[2], out=jlt);
    
    // Jump if ANY of the above jump conditions are met
    Or (a=jgt, b=jeq, out=jge);
    Or (a=jlt, b=jge, out=jump);

    // Load the program counter if it is a C instruciton and ANY of the jump
    // conditions are met.  Otherwise, increment the counter
    And (a=instruction[15], b=jump, out=load);
    Not (in=load, out=inc);
    PC (in=outA, load=load, inc=inc, reset=reset, out[0..14]=pc);

    // Write to memory if it is a C instruciton and the destination is memory
    And (a=instruction[15], b=instruction[3], out=writeM);
}