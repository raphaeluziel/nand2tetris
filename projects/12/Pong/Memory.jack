// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap;
    static int freeList;
    static int lastFreeAddy;

    /** Initializes the class. */
    function void init() {

        let ram = 0;    // Set address of array to 0 to have access to FULL ram

        let heap = 2048;        // heap base address
        let heap[0] = 0;        // The entire heap is available
        let heap[1] = 14334;    // Hack size of heap

        let freeList = 2048;    // Points to first free segment in heap
        let lastFreeAddy = 2048;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var int addy, next, freeSize, blockAddy;

        let addy = freeList;
        let next = ram[addy];
        let freeSize = ram[addy+1];
        
        while (true) {
            if (ram[addy+1] > (size+2)) {
                let blockAddy = addy+2;
                let ram[addy] = 0;
                let ram[addy+1] = size;
                let freeList = addy + size + 2;
                let ram[freeList] = next;
                let ram[freeList+1] = freeSize - (size+2);
                return blockAddy;
            }
            else {
                let addy = ram[addy];
            }
        }

        do Output.printString("ERROR");
        return -1;  // ERROR
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        let ram[freeList] = o-2;

        return;
    }    
}
