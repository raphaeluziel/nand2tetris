// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array byte;

    /** Initializes the library. */
    function void init() {
        let byte = Array.new(16);

        let byte[0] = 1;
        let byte[1] = 2;
        let byte[2] = 4;
        let byte[3] = 8;

        let byte[4] = 16;
        let byte[5] = 32;
        let byte[6] = 64;
        let byte[7] = 128;

        let byte[8] = 256;
        let byte[9] = 512;
        let byte[10] = 1024;
        let byte[11] = 2048;

        let byte[12] = 4096;
        let byte[13] = 8192;
        let byte[14] = 16384;
        let byte[15] = 32767 + 1;    // 16-byte 1000 0000 0000 0000 = -327678 = 32767 + 1
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0)  { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, shiftedx, sum, bit;
        let i = 0;
        let sum = 0;
        let bit = 1;
        let shiftedx = x;
        // Using shifting bits method
        /*
        while (i < 16) {
            if ((bit & y) = bit) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let bit = bit + bit;
            let i = i + 1;
        }
        */
        // Using the array method suggested
        while (i < 16) {
            if ((byte[i] & y) = byte[i]) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, t, sign, absx, absy;
        let absx = Math.abs(x);
        let absy = Math.abs(y);
        let sign = 1;
        if (x < 0)  { let sign = -sign; }
        if (y < 0)  { let sign = -sign; }
        if ((absy > absx) | (absy < 0))    { return 0; }
        if (y < 16384) {
            let q = absx / (absy + absy);    // YES we are calling this function recursively
        }
        else {
            return 0;
        }
        let t = q*absy;
        let t = t + t;
        if ((absx - t) < absy) {
            if (sign = -1)  { return -(q + q); }
            return (q + q);
        }
        // ELSE
        if (sign = -1)  { return -(q + q + 1); }
        // ELSE
        return (q + q + 1);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, try;
        let j = 7;
        let y = 0;
        while (j > -1) {
            let try = y + byte[j];
            let try = try * try;
            if (((try < x) | (try = x)) & (try > 0)) {
                let y = y + byte[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b)  { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b)  { return a; }
        return b;
    }
}
