// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap;
    static int freeList;
    static int lastFreeAddy;

    /** Initializes the class. */
    function void init() {

        let ram = 0;    // Set address of array to 0 to have access to FULL ram

        let heap = 2048;        // heap base address
        let heap[0] = 0;        // The entire heap is available
        let heap[1] = 14334;    // Hack size of heap

        let freeList = 2048;    // Points to first free segment in heap
        let lastFreeAddy = 2048;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int next;
        var int block;
        var int segmentSize;

        let next = freeList;        // Start next at beginning of freeList
        // Move through this linked list until memory found
        while (next > 0) {
            if (ram[next+1] > (size + 1)) {
                // Reduce size of free block by the amount needed for allocation
                let segmentSize = ram[next+1] - (size + 2);
                let heap[next+1] = segmentSize;
  
                let next = next + size + 2;   // Move pointer to newly allocated block start

                let heap[next] = 0;           // Set next pointer of the block to 0 (no longer free)
                let heap[next+1] = size;      // Set size of block

                let block = next+2;

                let heap[1] = heap[1] - heap;
            }
            else {
                let next = heap[next];
            }
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        let ram[lastFreeAddy] = o;
        let lastFreeAddy = o; 

        return;
    }    
}
